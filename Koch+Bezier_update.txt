#include <GL/glut.h>
#include <cmath>

bool drawBezierInstead = true; // üîÅ Set to false to draw Koch instead

// ‚ú® Koch Curve Recursive
void drawKoch(float x1, float y1, float x2, float y2, int iter) {
    if (iter == 0) {
        glBegin(GL_LINES);
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
        glEnd();
        return;
    }

    float dx = (x2 - x1) / 3, dy = (y2 - y1) / 3;
    float xA = x1 + dx, yA = y1 + dy;
    float xB = x1 + 2*dx, yB = y1 + 2*dy;
    float xC = (x1 + x2)/2 - sqrt(3)*dy/6, yC = (y1 + y2)/2 + sqrt(3)*dx/6;

    drawKoch(x1, y1, xA, yA, iter-1);
    drawKoch(xA, yA, xC, yC, iter-1);
    drawKoch(xC, yC, xB, yB, iter-1);
    drawKoch(xB, yB, x2, y2, iter-1);
}

// ‚ú® Bezier Curve (Quadratic) using recursive midpoint subdivision
void bezier(float x0, float y0, float x1, float y1, float x2, float y2, int depth) {
    if (depth == 0) {
        glBegin(GL_LINES);
        glVertex2f(x0, y0);
        glVertex2f(x2, y2);
        glEnd();
        return;
    }

    float x01 = (x0 + x1)/2, y01 = (y0 + y1)/2;
    float x12 = (x1 + x2)/2, y12 = (y1 + y2)/2;
    float x012 = (x01 + x12)/2, y012 = (y01 + y12)/2;

    bezier(x0, y0, x01, y01, x012, y012, depth - 1);
    bezier(x012, y012, x12, y12, x2, y2, depth - 1);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 1, 1);

    if (drawBezierInstead)
        bezier(100, 100, 300, 400, 500, 100, 5);  // Quadratic Bezier
    else
        drawKoch(100, 300, 500, 300, 4);          // Koch Curve

    glFlush();
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(600, 480);
    glutCreateWindow("Koch or Bezier");
    glutDisplayFunc(display);
    gluOrtho2D(0, 600, 0, 480);
    glutMainLoop();
    return 0;
}

